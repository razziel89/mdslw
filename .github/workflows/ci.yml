name: "ci"

on:
  push:
  pull_request:
    branches: main

# Ensure there is only ever one workflow of this kind running at a time.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  ci:
    runs-on: ubuntu-latest
    # Avoid very long running jobs.
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # Needed to update coverage badge and to run goreleaser.
        fetch-depth: 0

    - name: Remove possible compilation remnants
      run: |
        rm -rf ./target ./dist

    - name: Install dependencies
      run: |
        sudo apt-get update
        # General.
        sudo apt-get install -yqq bash curl make git jq

    - name: Install Rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > install_rust.sh
        sh install_rust.sh -y
        echo "$HOME/.cargo/bin" >> "${GITHUB_PATH}"

    - name: Download language files
      run: make build-language-files

    - name: Build binary
      run: make build-dev
      # Treat all warnings as errors.
      env:
        RUSTFLAGS: "-Dwarnings"

    - name: Lint
      run: make lint

    - name: Run tests
      run: make test

    - name: Check coverage
      run: make coverage

    - name: Install cross-compilation dependencies
      if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
      run: |
        # For ARM Linux.
        sudo apt-get install -yqq gcc-arm-linux-gnueabihf
        # For Windows.
        sudo apt-get install -yqq mingw-w64
        # For MacOS.
        sudo apt-get install -yqq \
          clang gcc g++ zlib1g-dev libmpc-dev libmpfr-dev libgmp-dev

    - name: Install toolchains
      if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
      run: make install-toolchains

    - name: Build all release binaries apart from MacOS
      if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
      run: |
        echo '[target.armv7-unknown-linux-gnueabihf]' >> ~/.cargo/config
        echo 'linker = "arm-linux-gnueabihf-gcc"' >> ~/.cargo/config

        make build-prod-all

    # Based on this tutorial. Thanks so much, this works nicely!
    # https://jamwaffles.github.io/rust/2019/02/17/rust-cross-compile-linux-to-macos.html/
    - name: Prepare building MacOS binaries separately
      if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
      run: |
        echo '[target.x86_64-apple-darwin]' > ~/.cargo/config
        echo 'linker = "x86_64-apple-darwin14-clang"' >> ~/.cargo/config
        echo 'ar = "x86_64-apple-darwin14-ar"' >> ~/.cargo/config

        git clone https://github.com/tpoechtrager/osxcross
        cd osxcross
        wget -nc https://s3.dockerproject.org/darwin/v2/MacOSX10.11.sdk.tar.xz
        mv MacOSX10.11.sdk.tar.xz tarballs/
        UNATTENDED=yes OSX_VERSION_MIN=10.11 ./build.sh

        echo "$(pwd)/target/bin" >> "${GITHUB_PATH}"

    - name: Build MacOS binaries separately
      if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
      run: cargo build --release --target x86_64-apple-darwin

    - name: Copy release binaries
      if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
      run: |
        make copy-relese-binaries
        ls -l ./dist/*

    - name: Make release
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/mdslw_x86_64-unknown-linux-musl
          dist/mdslw_armv7-unknown-linux-gnueabihf
          dist/mdslw_x86_64-apple-darwin
          dist/mdslw_x86_64-pc-windows-gnu.exe

  macos:
    runs-on: macos-latest
    # Avoid very long running jobs.
    timeout-minutes: 60

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # Needed to update coverage badge and to run goreleaser.
        fetch-depth: 0
